name: Build
on:
  push:
    paths:
      - '.github/workflows/build.yml'
  schedule:
    - cron: '0 16 * * *'
env:
  GITHUB_USER: "${{secrets.USERNAME}}"
  GITHUB_EMAIL: "${{secrets.EMAIL}}"
  GITHUB_TOKEN: "${{secrets.API_TOKEN_GITHUB}}"
  SOURCE_DIR: "${{github.workspace}}/source"
  OUTPUT_DIR: "${{github.workspace}}/output"
  BUILD_DIR: "${{github.workspace}}/build"
  WGET_DIR: "${{github.workspace}}/wget"
  MPREFIX: "${{github.workspace}}/output/toolchain"
  MSYSROOT: "${{github.workspace}}/output/sysroot"
  PATH: "${{github.workspace}}/output/toolchain/bin:/usr/bin:/bin"
  MAKE: "make INFO_DEPS= infodir= ac_cv_prog_lex_root=lex.yy MAKEINFO=true"
  CFLAGS: "-g0 -O2"
  CXXFLAGS: "-g0 -O2"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set timezone to UTC+8
      run: |
        sudo rm -f /etc/localtime && sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        echo "$(date "+%Y.%m.%d %H:%M:%S UTC%z")" | tee /tmp/start_time
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc make libtool bc autoconf build-essential pkg-config tar lzip git autopoint gettext help2man txt2man libssl-dev wget
    - name: Create directory
      run: |
        mkdir -vp ${SOURCE_DIR} ${OUTPUT_DIR} ${WGET_DIR} ${MPREFIX} ${MSYSROOT} ${BUILD_DIR}/{build-gmp,build-mpfr,build-mpc,build-isl,build-binutils,build-gcc,build-musl}
    - name: Wget and unzip gmp-6.2.1
      run: |
        wget -P ${WGET_DIR} https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.lz
        tar -xvf ${WGET_DIR}/gmp-6.2.1.tar.lz -C ${SOURCE_DIR}
    - name: Wget and unzip mpfr-4.2.0
      run: |
        wget -P ${WGET_DIR} https://ftp.gnu.org/gnu/mpfr/mpfr-4.2.0.tar.gz
        tar -xvf ${WGET_DIR}/mpfr-4.2.0.tar.gz -C ${SOURCE_DIR}
    - name: Wget and unzip mpc-1.3.1
      run: |
        wget -P ${WGET_DIR} https://ftp.gnu.org/gnu/mpc/mpc-1.3.1.tar.gz
        tar -xvf ${WGET_DIR}/mpc-1.3.1.tar.gz -C ${SOURCE_DIR}
    - name: Wget and unzip isl-0.25
      run: |
        wget -P ${WGET_DIR} https://libisl.sourceforge.io/isl-0.25.tar.gz
        tar -xvf ${WGET_DIR}/isl-0.25.tar.gz -C ${SOURCE_DIR}
    - name: Wget and unzip musl-1.2.3
      run: |
        wget -P ${WGET_DIR} https://musl.libc.org/releases/musl-1.2.3.tar.gz
        tar -xvf ${WGET_DIR}/musl-1.2.3.tar.gz -C ${SOURCE_DIR}
    - name: Wget and unzip linux-6.1.6
      run: |
        wget -P ${WGET_DIR} https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.1.6.tar.xz
        tar -xvf ${WGET_DIR}/linux-6.1.6.tar.xz -C ${SOURCE_DIR}
    - name: Clone binutils
      run: git clone git://sourceware.org/git/binutils-gdb.git -b master ${SOURCE_DIR}/binutils --depth=1
    - name: Clone gcc
      run: git clone git://gcc.gnu.org/git/gcc.git -b master ${SOURCE_DIR}/gcc --depth=1
    - name: Make gmp
      run: |
        cd ${BUILD_DIR}/build-gmp
        GMP_SOURCE=$(find ${SOURCE_DIR} -maxdepth 1 -type d -name "gmp*")
        ${GMP_SOURCE}/configure --prefix="${OUTPUT_DIR}/gmp"
        $MAKE all -j$(nproc --all)
        $MAKE install -j$(nproc --all)
    - name: Make mpfr
      run: |
        cd ${BUILD_DIR}/build-mpfr
        MPFR_SOURCE=$(find ${SOURCE_DIR} -maxdepth 1 -type d -name "mpfr*")
        ${MPFR_SOURCE}/configure --prefix="${OUTPUT_DIR}/mpfr" --with-gmp="${OUTPUT_DIR}/gmp"
        $MAKE all -j$(nproc --all)
        $MAKE install -j$(nproc --all)
    - name: Make mpc
      run: |
        cd ${BUILD_DIR}/build-mpc
        MPC_SOURCE=$(find ${SOURCE_DIR} -maxdepth 1 -type d -name "mpc*")
        ${MPC_SOURCE}/configure --prefix="${OUTPUT_DIR}/mpc" --with-gmp="${OUTPUT_DIR}/gmp" --with-mpfr="${OUTPUT_DIR}/mpfr"
        $MAKE all -j$(nproc --all)
        $MAKE install -j$(nproc --all)
    - name: Make isl
      run: |
        cd ${BUILD_DIR}/build-isl
        ISL_SOURCE=$(find ${SOURCE_DIR} -maxdepth 1 -type d -name "isl*")
        ${ISL_SOURCE}/configure --prefix="${OUTPUT_DIR}/isl" --with-gmp="${OUTPUT_DIR}/gmp" --with-mpfr="${OUTPUT_DIR}/mpfr" --with-mpc="${OUTPUT_DIR}/mpc"
        $MAKE all -j$(nproc --all)
        $MAKE install -j$(nproc --all)
    - name: Make musl headers
      run: |
        MUSL_SOURCE=$(find ${SOURCE_DIR} -maxdepth 1 -type d -name "musl*")
        cd ${MUSL_SOURCE}
        $MAKE ARCH="aarch64" prefix="/usr" DESTDIR="${MSYSROOT}" install-headers -j$(nproc --all)
    - name: Configure binutils
      run: |
        cd ${BUILD_DIR}/build-binutils
        ${SOURCE_DIR}/binutils/configure --target="aarch64-linux-musl" --prefix="${MPREFIX}" --with-sysroot="${MSYSROOT}" --disable-multilib --disable-werro --with-gmp="${OUTPUT_DIR}/gmp" --with-mpc="${OUTPUT_DIR}/mpc" --with-mpfr="${OUTPUT_DIR}/mpfr" --with-isl="${OUTPUT_DIR}/isl"
    - name: Make binutils
      run: |
        cd ${BUILD_DIR}/build-binutils
        $MAKE all-binutils all-gas all-ld -j$(nproc --all)
        $MAKE install-strip-binutils install-strip-gas install-strip-ld -j$(nproc --all)
    - name: Configure gcc
      run: |
        cd ${BUILD_DIR}/build-gcc
        ${SOURCE_DIR}/gcc/configure --target="aarch64-linux-musl" --prefix="${MPREFIX}" --with-sysroot="${MSYSROOT}" --enable-languages="c,c++" --disable-multilib --disable-bootstrap --disable-libsanitizer --disable-werror --enable-initfini-array --with-arch=armv8-a --with-abi=lp64 --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419 --with-gmp="${OUTPUT_DIR}/gmp" --with-mpc="${OUTPUT_DIR}/mpc" --with-mpfr="${OUTPUT_DIR}/mpfr" --with-isl="${OUTPUT_DIR}/isl"
    - name: Make gcc (compiler)
      run: |
        mkdir -vp ${MSYSROOT}/usr/include
        cd ${BUILD_DIR}/build-gcc
        $MAKE all-gcc -j$(nproc --all)
        $MAKE install-strip-gcc -j$(nproc --all)
    - name: Make gcc (libgcc-static)
      run: |
        cd ${BUILD_DIR}/build-gcc
        $MAKE enable_shared=no all-target-libgcc -j$(nproc --all)
        $MAKE install-strip-target-libgcc -j$(nproc --all)
    - name: Configure musl
      run: |
        cd ${BUILD_DIR}/build-musl
        ARCH="aarch64"
        CC="aarch64-linux-musl-gcc"
        CROSS_COMPILE="aarch64-linux-musl-"
        LIBCC="$(find ${MPREFIX}/lib/gcc/aarch64-linux-musl -maxdepth 1 -type d -name "[0-9]*")/libgcc.a"
        MUSL_SOURCE=$(find ${SOURCE_DIR} -maxdepth 1 -type d -name "musl*")
        ${MUSL_SOURCE}/configure --host="aarch64-linux-musl" --prefix="/usr" --with-gmp="${OUTPUT_DIR}/gmp" --with-mpc="${OUTPUT_DIR}/mpc" --with-mpfr="${OUTPUT_DIR}/mpfr" --with-isl="${OUTPUT_DIR}/isl"
    - name: Make musl
      run: |
        cd ${BUILD_DIR}/build-musl
        $MAKE AR="aarch64-linux-musl-ar" RANLIB="aarch64-linux-musl-ranlib" -j$(nproc --all)
        $MAKE AR="aarch64-linux-musl-ar" RANLIB="aarch64-linux-musl-ranlib" DESTDIR="${MSYSROOT}" install -j$(nproc --all)
        rm -f ${MSYSROOT}/lib/ld-musl-aarch.so.1
        cp -avf ${MSYSROOT}/usr/lib/libc.so ${MSYSROOT}/lib/ld-musl-aarch.so.1
    - name: Make gcc (libgcc-shared)
      run: |
        cd ${BUILD_DIR}/build-gcc
        $MAKE enable_shared=yes all-target-libgcc -j$(nproc --all)
        $MAKE install-strip-target-libgcc -j$(nproc --all)
    - name: Make gcc (libgomp)
      run: |
        cd ${BUILD_DIR}/build-gcc
        $MAKE all-target-libgomp -j$(nproc --all)
        $MAKE install-strip-target-libgomp -j$(nproc --all)
    - name: Make gcc (libstdc++-v3)
      run: |
        cd ${BUILD_DIR}/build-gcc
        $MAKE all-target-libstdc++-v3 -j$(nproc --all)
        $MAKE install-strip-target-libstdc++-v3 -j$(nproc --all)
    - name: Make linux headers
      run: |
        LINUX_SOURCE=$(find ${SOURCE_DIR} -maxdepth 1 -type d -name "linux*")
        cd ${LINUX_SOURCE}
        $MAKE ARCH=arm64 mrproper -j$(nproc --all)
        $MAKE O="${OUTPUT_DIR}/linux" ARCH=arm64 INSTALL_HDR_PATH="${MSYSROOT}/usr" headers_install -j$(nproc --all)
    - name: Consolidate files
      run: |
        cp -avf ${MSYSROOT}/usr/* ${MPREFIX}/aarch64-linux-musl
        cp -avf ${MSYSROOT}/lib ${MPREFIX}/aarch64-linux-musl
    - name : Upload log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: log
        path: ${BUILD_DIR}/build-gcc/config.log
    - name: Push
      run: |
        git config --global user.name "${GITHUB_USER}"
        git config --global user.email "${GITHUB_EMAIL}"
        git clone https://"${GITHUB_USER}":"${GITHUB_TOKEN}"@github.com/chase535/aarch64-linux-gnu-with-musl /home/runner/work/git_clone -b main --depth=1
        cd /home/runner/work/git_clone
        git rm -rf ./*
        git commit -as -m "Delete old files"
        cp -avf ${MPREFIX}/* .
        git add . -f
        git commit -as -m "$(cat /tmp/start_time)" -m "$(./bin/aarch64-linux-musl-gcc --version)"
        git push origin main -f
